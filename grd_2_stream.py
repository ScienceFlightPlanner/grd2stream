# -*- coding: utf-8 -*-
"""
/***************************************************************************
 grd2Stream
                                 A QGIS plugin
 Abraham Wondimu
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-12-14
        git sha              : $Format:%H$
        copyright            : (C) 2013-2024 by Thomas Kleiner
        email                : scienceflightplanner@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/***************************************************************************
 *  BSD 3-Clause License
 *
 *  Copyright (c) 2013-2024, Thomas Kleiner
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 *  3. Neither the name of the copyright holder nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 *  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
***************************************************************************/
"""
import os
import stat

from PyQt5.QtWidgets import QWidget
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py (DON'T DELETE IT)
from .resources import *
# Import the code for the dialog
from .grd_2_stream_dialog import Grd2StreamDialog
import os.path

from .flowline_module import FlowlineModule

plugin_instance = None

class Grd2Stream:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        global plugin_instance
        if plugin_instance is not None:
            raise RuntimeError("Another instance of the plugin is already running.")
        plugin_instance = self
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.icon_dir = os.path.join(self.plugin_dir, "resources", "icons")
        self.toolbar = self.iface.addToolBar("grd2stream Toolbar")
        self.toolbar.setObjectName("grd2stream")
        self.flowline_module = FlowlineModule(iface)
        self.flowline_action = None
        self.ensure_conda_setup()

    def ensure_conda_setup(self):
        """Ensure Miniconda is installed & environment is properly set up."""
        self.flowline_module.install_miniconda()
        self.flowline_module.setup_conda_environment()

    def add_action(
        self,
        icon: str,
        text: str,
        callback,
        enabled_flag: bool = True,
    ) -> QAction:
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """
        icon_path = os.path.join(self.icon_dir, icon)
        if not os.path.exists(icon_path):
            self.iface.messageBar().pushWarning(
                "Warning",
                f"Icon file not found: {icon_path}. Using a placeholder."
            )
            icon = QIcon()
        else:
            icon = QIcon(icon_path)

        action = QAction(icon, text, self.iface.mainWindow())
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        self.toolbar.addAction(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        self.flowline_action = self.add_action(
            icon="icon_flowline.png",
            text="Calculate Flowlines",
            callback=self.flowline_module.open_selection_dialog
        )

    def unload(self):
        """Properly unloads the plugin, ensuring no lingering instances."""
        if self.flowline_action:
            self.flowline_action.triggered.disconnect()
            self.toolbar.removeAction(self.flowline_action)

        if self.toolbar:
            del self.toolbar

        global plugin_instance
        plugin_instance = None
