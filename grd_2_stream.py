# -*- coding: utf-8 -*-
"""
/***************************************************************************
 grd2Stream
                                 A QGIS plugin
 Abraham Wondimu
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-12-14
        git sha              : $Format:%H$
        copyright            : (C) 2013-2024 by Thomas Kleiner
        email                : scienceflightplanner@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/***************************************************************************
 *  BSD 3-Clause License
 *
 *  Copyright (c) 2013-2024, Thomas Kleiner
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 *  3. Neither the name of the copyright holder nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 *  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
***************************************************************************/
"""

import typing
from functools import partial
from typing import List

from PyQt5.QtCore import QObject
from PyQt5.QtWidgets import QMenu, QToolButton, QToolBar, QApplication, QWidget
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis._core import QgsProject
from qgis._gui import QgisInterface

# Initialize Qt resources from file resources.py (DON'T DELETE IT)
from .resources import *
# Import the code for the dialog
from .grd_2_stream_dialog import Grd2StreamDialog
import os.path

from .action_module import ActionModule
from .utils import LayerUtils
from .flowline_module import FlowlineModule

icon_folder_path = os.path.join(":resources", "icons")
plugin_instance = None

class Grd2Stream:
    """QGIS Plugin Implementation."""
    popupMenu: QMenu
    toolButton: QToolButton
    iface: QgisInterface
    plugin_dir: str
    toolbar_items: List[QObject]
    pluginMenu: QMenu
    toolbar: QToolBar
    pluginIsActive: bool
    layer_utils: LayerUtils
    flowline_module: FlowlineModule
    action_module: ActionModule

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        global plugin_instance
        if plugin_instance is not None:
            raise RuntimeError("Another instance of the plugin is already running.")
        plugin_instance = self
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # Declare instance attributes
        self.toolbar_items = []
        self.options_factory = None
        self.pluginMenu = self.iface.pluginMenu().addMenu(QIcon(":icon.png"), "&grid2stream")
        self.toolbar = self.iface.addToolBar("grd2stream Toolbar")
        if self.toolbar:
            self.toolbar.setObjectName("grd2stream")

        app = QApplication.instance()
        app.setStyleSheet("""
                               QToolTip {
                                   font-weight: bold;
                               }
                           """)

        self.pluginIsActive = False

        self.layer_utils = LayerUtils(iface)
        self.flowline_module = FlowlineModule(iface)
        self.action_module = ActionModule(iface)

    def add_action(
        self,
        icon: str,
        text: str,
        callback: typing.Callable[..., None],
        enabled_flag: bool = True,
        add_to_menu: bool = True,
        add_to_toolbar: bool = True,
        parent: typing.Union[None, QWidget] =None,
        is_checkable: bool = False
    ) -> QAction:
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """
        if parent is None:
            parent = self.iface.mainWindow()

        icon_path = os.path.join(icon_folder_path, icon)
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.setObjectName(text)

        action.triggered.connect(callback)

        action.setEnabled(enabled_flag)
        action.setCheckable(is_checkable)

        if add_to_toolbar and self.toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.pluginMenu.addAction(action)

        self.toolbar_items.append(action)

        return action

    def add_popup_menu_button(self):
        self.popupMenu = QMenu()
        tag_list = self.flowline_module.tags
        for tag in tag_list[0:len(tag_list) - 1]:
            action = self.add_action(
                icon="icon_tag.png",
                text=tag,
                callback=partial(self.flowline_module.tag, tag),
                add_to_toolbar=False,
                parent=self.popupMenu
            )
            action.setToolTip(self.action_module.tag)
            self.popupMenu.addAction(action)

        self.popupMenu.addSeparator()

        action = self.add_action(
            icon="icon_custom_tag.png",
            text=tag_list[-1],
            callback=partial(self.flowline_module.new_tag, self.popupMenu),
            add_to_toolbar=False,
            parent=self.popupMenu
        )
        action.setToolTip(self.action_module.tag)
        self.popupMenu.addAction(action)

        self.toolButton = QToolButton(self.iface.mainWindow())
        icon_path = os.path.join(icon_folder_path, "icon_tag.png")
        self.toolButton.setIcon(QIcon(icon_path))
        self.toolButton.setText(self.action_module.tag)
        self.toolButton.setToolTip(self.action_module.tag)
        self.toolButton.setMenu(self.popupMenu)
        self.toolButton.installEventFilter(self.toolbar)
        self.toolButton.setPopupMode(QToolButton.InstantPopup)

        self.toolbar_items.append(self.toolButton)
        self.toolbar.addWidget(self.toolButton)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        """Add toolbar buttons"""
        self.add_action(
            icon="icon_flowline.png",
            text=self.action_module.flowline,
            callback=self.flowline_module.open_geotiff_selection_dialog,
            parent=self.toolbar,
        )
        self.action_module.connect(self.toolbar_items)

    def unload(self):
        """Properly unloads the plugin, ensuring no lingering instances."""
        # Disconnect toolbar actions and remove them from the toolbar
        if hasattr(self, 'toolbar_items'):
            for action in self.toolbar_items:
                if isinstance(action, QAction):
                    action.triggered.disconnect()  # Disconnect signal
                    self.iface.removeToolBarIcon(action)  # Remove toolbar icon

        # Remove custom menus
        if self.pluginMenu:
            self.iface.pluginMenu().removeAction(self.pluginMenu.menuAction())

        # Remove the toolbar
        if self.toolbar:
            del self.toolbar

        # **Call the `close()` method on `action_module` to disconnect its signals**
        if hasattr(self, 'action_module') and self.action_module:
            self.action_module.close()

        # Close and delete dialogs or GUI components, if they exist
        if hasattr(self, 'dialog') and self.dialog:
            self.dialog.close()
            self.dialog.deleteLater()

        # Remove custom layers (optional, based on layers added by the plugin)
        layers_to_remove = ['Streamlines']  # Replace with relevant layer names if any
        project = QgsProject.instance()
        for layer in project.mapLayers().values():
            if layer.name() in layers_to_remove:
                project.removeMapLayer(layer.id())

        # Reset plugin state
        self.pluginIsActive = False  # Reset the active state flag
        global plugin_instance  # Reset the global plugin instance
        plugin_instance = None


    def run(self):
        """Run method that loads and starts the plugin"""
        if not self.pluginIsActive:
            self.pluginIsActive = True
